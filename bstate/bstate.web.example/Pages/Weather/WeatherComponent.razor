@using bstate.core.Services
@using bstate.web.example.Features.Weather
@using bstate.web.example.Pages.Weather.Models
@inject IComponentService ComponentService
@inject HttpClient HttpClient

@if (State.Forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th aria-label="Temperature in Celsius">Temp. (C)</th>
            <th aria-label="Temperature in Farenheit">Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in State.Forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    
    WeatherState State => ComponentService.UseState<WeatherState>(this);

    // protected override void ConfigureCustomLifeCycle()
    // {
    //     this.UseOnInitialize<WeatherInitialize>();
    // }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000); // simulate async call ( fetch data from server)
        var forecasts = await HttpClient.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        await State.SetForecasts(forecasts);
        await base.OnInitializedAsync();
    }

}